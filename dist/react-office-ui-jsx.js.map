{"version":3,"sources":["OfficeUI.jsx","OfficeUIButton.jsx","OfficeUICallout.jsx","OfficeUIChoiceField.jsx","OfficeUISpinner.jsx","OfficeUITable.jsx","OfficeUITextField.jsx","OfficeUIToggle.jsx"],"names":[],"mappings":"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","file":"react-office-ui-jsx.js","sourcesContent":["// import { OfficeUIButton } from \"./OfficeUIButton\";\n// import { OfficeUIChoiceField } from \"./OfficeUIChoiceField\";\n// import { OfficeUIToggle } from \"./OfficeUIToggle\";\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst BUTTON_TYPES = [\n    \"command\",\n    \"compound\",\n    \"hero\",\n    \"primary\",\n];\nclass OfficeUIButton extends React.Component {\n    render() {\n        const { disabled, type } = this.props;\n        var classList = classNames({\n            \"ms-Button\": true,\n            \"is-disabled\": disabled,\n            [`ms-Button--${type}`]: type\n        });\n        return (<button {...this.props} type=\"button\" className={classList}>\r\n            </button>);\n    }\n}\nOfficeUIButton.propTypes = {\n    type: React.PropTypes.oneOf(BUTTON_TYPES),\n    disabled: React.PropTypes.bool\n};\nconst OfficeUIButtonIcon = (props) => (<span {...props} className=\"ms-Button-icon\"></span>);\nconst OfficeUIButtonLabel = (props) => (<span {...props} className=\"ms-Button-label\"></span>);\nconst OfficeUIButtonDescription = (props) => (<span {...props} className=\"ms-Button-description\"></span>);\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUICallout = (props) => {\n    const { type, title, content } = props;\n    var classList = classNames({\n        \"ms-Callout\": true,\n        [`ms-Callout--${type}`]: type\n    });\n    return (<div className={classList}>\r\n            <div className=\"ms-Callout-main\">\r\n                <div className=\"ms-Callout-header\">\r\n                    <p className=\"ms-Callout-title\">{title}</p>\r\n                </div>\r\n                <button className=\"ms-Callout-close\">\r\n                    <i className=\"ms-Icon ms-Icon--x\"></i>\r\n                </button>\r\n                <div className=\"ms-Callout-inner\">\r\n                    <div className=\"ms-Callout-content\">\r\n                        <p className=\"ms-Callout-subText\">{content}</p>\r\n                    </div>\r\n                    <div className=\"ms-Callout-actions\">\r\n                        {props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\n};\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUIChoiceField = (props) => {\n    var inputId = props.id + \"_input\";\n    return (<div className=\"ms-ChoiceField\">\r\n            <input type={props.type} id={inputId} className=\"ms-ChoiceField-input\"/>\r\n            <label htmlFor={inputId} className=\"ms-ChoiceField-field\">\r\n                <span {...props} className=\"ms-Label\"></span>\r\n            </label>\r\n        </div>);\n};\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUISpinner = (props) => {\n    var parentSize = 20;\n    var offsetSize = 0.2;\n    var numCircles = 8;\n    var offset = parentSize * offsetSize;\n    var angle = 0;\n    var step = (2 * Math.PI) / numCircles;\n    var radius = (parentSize - offset) * 0.5;\n    var i = numCircles;\n    var circles = [];\n    while (i--) {\n        var circleStyles = {\n            width: parentSize * offsetSize + \"px\",\n            height: parentSize * offsetSize + \"px\",\n            left: Math.round(parentSize * 0.5 + radius * Math.cos(angle) - parentSize * offsetSize * 0.5) - offset * 0.5,\n            top: Math.round(parentSize * 0.5 + radius * Math.sin(angle) - parentSize * offsetSize * 0.5) - offset * 0.5,\n        };\n        angle += step;\n        circles.push(circleStyles);\n    }\n    return (<div {...props} className=\"ms-Spinner\">\r\n            {circles.map((c, i) => <div key={i} className=\"ms-Spinner-circle\" style={c}/>)}\r\n        </div>);\n};\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUITable = (props) => (<table {...props} className=\"ms-Table\">\r\n    </table>);\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUITextField = (props) => {\n    var inputId = props.id + \"_input\";\n    const { type, description } = props;\n    var classList = classNames({\n        \"ms-TextField\": true,\n        [`ms-TextField--${type}`]: type\n    });\n    var input = type === \"multiline\" ? (<textarea className=\"ms-TextField-field\"></textarea>) : (<input type=\"text\" id={inputId} className=\"ms-TextField-field\"/>);\n    return (<div id={props.id} className={classList}>\r\n            <label {...props} htmlFor={inputId} className=\"ms-Label\"/>\r\n            {input}\r\n            <span className=\"ms-TextField-description\">{description}</span>\r\n        </div>);\n};\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUIToggle = (props) => {\n    var inputId = props.id + \"_input\";\n    return (<div id={props.id} className=\"ms-Toggle\">\r\n            <span className=\"ms-Toggle-description\">{props.children}</span>\r\n            <input type=\"checkbox\" id={inputId} className=\"ms-Toggle-input\"/>\r\n            <label htmlFor={inputId} className=\"ms-Toggle-field\">\r\n                <span className=\"ms-Label ms-Label--off\">{props.offLabel}</span>\r\n                <span className=\"ms-Label ms-Label--on\">{props.onLabel}</span>\r\n            </label>\r\n        </div>);\n};\n"],"sourceRoot":"/source/"}