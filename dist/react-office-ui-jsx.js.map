{"version":3,"sources":["OfficeUIButton.jsx","OfficeUICallout.jsx","OfficeUIChoiceField.jsx","OfficeUISpinner.jsx","OfficeUITable.jsx","OfficeUITextField.jsx","OfficeUIToggle.jsx"],"names":[],"mappings":"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","file":"react-office-ui-jsx.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\nconst BUTTON_TYPES = [\n    \"command\",\n    \"compound\",\n    \"hero\",\n    \"primary\",\n];\nclass OfficeUIButton extends React.Component {\n    render() {\n        const { disabled, type } = this.props;\n        var classList = classNames({\n            \"ms-Button\": true,\n            \"is-disabled\": disabled,\n            [`ms-Button--${type}`]: type\n        });\n        return (<button {...this.props} type=\"button\" className={classList}>\r\n            </button>);\n    }\n}\nOfficeUIButton.propTypes = {\n    type: React.PropTypes.oneOf(BUTTON_TYPES),\n    disabled: React.PropTypes.bool\n};\nconst OfficeUIButtonIcon = (props) => (<span {...props} className=\"ms-Button-icon\"></span>);\nconst OfficeUIButtonLabel = (props) => (<span {...props} className=\"ms-Button-label\"></span>);\nconst OfficeUIButtonDescription = (props) => (<span {...props} className=\"ms-Button-description\"></span>);\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUICallout = (props) => {\n    const { type, title, content } = props;\n    var classList = classNames({\n        \"ms-Callout\": true,\n        [`ms-Callout--${type}`]: type\n    });\n    return (<div className={classList}>\r\n            <div className=\"ms-Callout-main\">\r\n                <div className=\"ms-Callout-header\">\r\n                    <p className=\"ms-Callout-title\">{title}</p>\r\n                </div>\r\n                <button className=\"ms-Callout-close\">\r\n                    <i className=\"ms-Icon ms-Icon--x\"></i>\r\n                </button>\r\n                <div className=\"ms-Callout-inner\">\r\n                    <div className=\"ms-Callout-content\">\r\n                        <p className=\"ms-Callout-subText\">{content}</p>\r\n                    </div>\r\n                    <div className=\"ms-Callout-actions\">\r\n                        {props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\n};\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUIChoiceField = (props) => {\n    var inputId = props.id + \"_input\";\n    return (<div className=\"ms-ChoiceField\">\r\n            <input type={props.type} id={inputId} className=\"ms-ChoiceField-input\"/>\r\n            <label htmlFor={inputId} className=\"ms-ChoiceField-field\">\r\n                <span {...props} className=\"ms-Label\"></span>\r\n            </label>\r\n        </div>);\n};\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUISpinner = (props) => {\n    var parentSize = 20;\n    var offsetSize = 0.2;\n    var numCircles = 8;\n    var offset = parentSize * offsetSize;\n    var angle = 0;\n    var step = (2 * Math.PI) / numCircles;\n    var radius = (parentSize - offset) * 0.5;\n    var i = numCircles;\n    var circles = [];\n    while (i--) {\n        var circleStyles = {\n            width: parentSize * offsetSize + \"px\",\n            height: parentSize * offsetSize + \"px\",\n            left: Math.round(parentSize * 0.5 + radius * Math.cos(angle) - parentSize * offsetSize * 0.5) - offset * 0.5,\n            top: Math.round(parentSize * 0.5 + radius * Math.sin(angle) - parentSize * offsetSize * 0.5) - offset * 0.5,\n        };\n        angle += step;\n        circles.push(circleStyles);\n    }\n    return (<div {...props} className=\"ms-Spinner\">\r\n            {circles.map((c, i) => <div key={i} className=\"ms-Spinner-circle\" style={c}/>)}\r\n        </div>);\n};\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUITable = (props) => (<table {...props} className=\"ms-Table\">\r\n    </table>);\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUITextField = (props) => {\n    var inputId = props.id + \"_input\";\n    const { type, description } = props;\n    var classList = classNames({\n        \"ms-TextField\": true,\n        [`ms-TextField--${type}`]: type\n    });\n    var input = type === \"multiline\" ? (<textarea className=\"ms-TextField-field\"></textarea>) : (<input type=\"text\" id={inputId} className=\"ms-TextField-field\"/>);\n    return (<div id={props.id} className={classList}>\r\n            <label {...props} htmlFor={inputId} className=\"ms-Label\"/>\r\n            {input}\r\n            <span className=\"ms-TextField-description\">{description}</span>\r\n        </div>);\n};\n","/// <reference path=\"../typings/tsd.d.ts\" />\nconst OfficeUIToggle = (props) => {\n    var inputId = props.id + \"_input\";\n    return (<div id={props.id} className=\"ms-Toggle\">\r\n            <span className=\"ms-Toggle-description\">{props.children}</span>\r\n            <input type=\"checkbox\" id={inputId} className=\"ms-Toggle-input\"/>\r\n            <label htmlFor={inputId} className=\"ms-Toggle-field\">\r\n                <span className=\"ms-Label ms-Label--off\">{props.offLabel}</span>\r\n                <span className=\"ms-Label ms-Label--on\">{props.onLabel}</span>\r\n            </label>\r\n        </div>);\n};\n"],"sourceRoot":"/source/"}