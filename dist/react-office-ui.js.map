{"version":3,"sources":["OfficeUI.tsx","OfficeUIButton.tsx","OfficeUICallout.tsx","OfficeUIChoiceField.tsx","OfficeUISpinner.tsx","OfficeUITable.tsx","OfficeUITextField.tsx","OfficeUIToggle.tsx"],"names":[],"mappings":"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","file":"react-office-ui.js","sourcesContent":["// import { OfficeUIButton } from \"./OfficeUIButton\";\r\n// import { OfficeUIChoiceField } from \"./OfficeUIChoiceField\";\r\n// import { OfficeUIToggle } from \"./OfficeUIToggle\";\r\n\r\n","/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nconst BUTTON_TYPES = [\r\n    \"command\",\r\n    \"compound\",\r\n    \"hero\",\r\n    \"primary\",\r\n]\r\n\r\nclass OfficeUIButton extends React.Component<any, any> {\r\n    static propTypes = {\r\n        type: React.PropTypes.oneOf(BUTTON_TYPES),\r\n        disabled: React.PropTypes.bool\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            disabled,\r\n            type\r\n        } = this.props\r\n\r\n        var classList = classNames({\r\n            \"ms-Button\": true,\r\n            \"is-disabled\": disabled,\r\n            [`ms-Button--${type}`]: type\r\n        });\r\n        return (\r\n            <button {...this.props} type=\"button\" className={classList}>\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nconst OfficeUIButtonIcon = (props) => (\r\n    <span {...props} className=\"ms-Button-icon\"></span>\r\n);\r\n\r\nconst OfficeUIButtonLabel = (props) => (\r\n    <span {...props} className=\"ms-Button-label\"></span>\r\n);\r\n\r\nconst OfficeUIButtonDescription = (props) => (\r\n    <span {...props} className=\"ms-Button-description\"></span>\r\n);\r\n\r\n","/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nconst OfficeUICallout = (props) => {\r\n    const {\r\n        type,\r\n        title,\r\n        content\r\n    } = props;    \r\n    var classList = classNames({\r\n        \"ms-Callout\": true,\r\n        [`ms-Callout--${type}`]: type\r\n    });\r\n\r\n    return (\r\n        <div className={classList}>\r\n            <div className=\"ms-Callout-main\">\r\n                <div className=\"ms-Callout-header\">\r\n                    <p className=\"ms-Callout-title\">{title}</p>\r\n                </div>\r\n                <button className=\"ms-Callout-close\">\r\n                    <i className=\"ms-Icon ms-Icon--x\"></i>\r\n                </button>\r\n                <div className=\"ms-Callout-inner\">\r\n                    <div className=\"ms-Callout-content\">\r\n                        <p className=\"ms-Callout-subText\">{content}</p>\r\n                    </div>\r\n                    <div className=\"ms-Callout-actions\">\r\n                        {props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nconst OfficeUIChoiceField = (props) => {\r\n    var inputId = props.id + \"_input\";\r\n    return (\r\n        <div className=\"ms-ChoiceField\">\r\n            <input type={props.type} id={inputId} className=\"ms-ChoiceField-input\" />\r\n            <label htmlFor={inputId} className=\"ms-ChoiceField-field\">\r\n                <span {...props} className=\"ms-Label\"></span>\r\n            </label>\r\n        </div>\r\n    );    \r\n};","/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nconst OfficeUISpinner = (props) => {\r\n    var parentSize = 20;\r\n    var offsetSize = 0.2;\r\n    var numCircles = 8;\r\n    var offset = parentSize * offsetSize;\r\n    var angle = 0;\r\n    var step = (2 * Math.PI) / numCircles;\r\n    var radius = (parentSize - offset) * 0.5;\r\n\r\n    var i = numCircles;\r\n    \r\n    var circles = [];\r\n        \r\n    while (i--) {\r\n        var circleStyles = {\r\n            width: parentSize * offsetSize + \"px\",\r\n            height: parentSize * offsetSize + \"px\",\r\n            left: Math.round(parentSize * 0.5 + radius * Math.cos(angle) - parentSize * offsetSize * 0.5) - offset * 0.5,\r\n            top: Math.round(parentSize * 0.5 + radius * Math.sin(angle) - parentSize * offsetSize * 0.5) - offset * 0.5,\r\n        };        \r\n        angle += step;\r\n        circles.push(circleStyles);\r\n    }\r\n\r\n    return (\r\n        <div {...props} className=\"ms-Spinner\">\r\n            {circles.map((c, i) => <div key={i} className=\"ms-Spinner-circle\" style={c} />)}\r\n        </div>    \r\n    );    \r\n};","/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nconst OfficeUITable = (props) => (\r\n    <table {...props} className=\"ms-Table\">\r\n    </table>\r\n);","/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nconst OfficeUITextField = (props) => {\r\n    var inputId = props.id + \"_input\";\r\n    const {\r\n        type,\r\n        description\r\n    } = props;\r\n    var classList = classNames({\r\n        \"ms-TextField\": true,\r\n        [`ms-TextField--${type}`]: type\r\n    });\r\n    var input = type === \"multiline\" ? (<textarea className=\"ms-TextField-field\"></textarea>) : (<input type=\"text\" id={inputId} className=\"ms-TextField-field\" />); \r\n    return (\r\n        <div id={props.id} className={classList}>\r\n            <label {...props} htmlFor={inputId} className=\"ms-Label\" />\r\n            {input}\r\n            <span className=\"ms-TextField-description\">{description}</span>\r\n        </div>\r\n    );    \r\n};","/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nconst OfficeUIToggle = (props) => {\r\n    var inputId = props.id + \"_input\";\r\n    return (\r\n        <div id={props.id} className=\"ms-Toggle\">\r\n            <span className=\"ms-Toggle-description\">{props.children}</span>\r\n            <input type=\"checkbox\" id={inputId} className=\"ms-Toggle-input\" />\r\n            <label htmlFor={inputId} className=\"ms-Toggle-field\">\r\n                <span className=\"ms-Label ms-Label--off\">{props.offLabel}</span>\r\n                <span className=\"ms-Label ms-Label--on\">{props.onLabel}</span>\r\n            </label>\r\n        </div>\r\n    );    \r\n};"],"sourceRoot":"/source/"}